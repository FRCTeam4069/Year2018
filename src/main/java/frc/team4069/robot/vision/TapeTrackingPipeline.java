package frc.team4069.robot.vision;

import edu.wpi.first.wpilibj.vision.VisionPipeline;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.imgproc.LineSegmentDetector;

/**
 * TapeTrackingPipeline class.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class TapeTrackingPipeline implements VisionPipeline {

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    //Outputs
    private Mat resizeImageOutput = new Mat();
    private Mat hslThresholdOutput = new Mat();
    private Mat blurOutput = new Mat();
    private ArrayList<Line> findLinesOutput = new ArrayList<Line>();
    private ArrayList<Line> filterLinesOutput = new ArrayList<Line>();

    /**
     * This is the primary method that runs the entire pipeline and updates the outputs.
     */
    @Override
    public void process(Mat source0) {
        // Step Resize_Image0:
        Mat resizeImageInput = source0;
        double resizeImageWidth = 240.0;
        double resizeImageHeight = 135.0;
        int resizeImageInterpolation = Imgproc.INTER_CUBIC;
        resizeImage(resizeImageInput, resizeImageWidth, resizeImageHeight, resizeImageInterpolation,
                resizeImageOutput);

        // Step HSL_Threshold0:
        Mat hslThresholdInput = resizeImageOutput;
        double[] hslThresholdHue = {0.0, 180.0};
        double[] hslThresholdSaturation = {59.62230215827338, 255.0};
        double[] hslThresholdLuminance = {128.41726618705036, 255.0};
        hslThreshold(hslThresholdInput, hslThresholdHue, hslThresholdSaturation,
                hslThresholdLuminance, hslThresholdOutput);

        // Step Blur0:
        Mat blurInput = hslThresholdOutput;
        BlurType blurType = BlurType.get("Median Filter");
        double blurRadius = 9.909909909909913;
        blur(blurInput, blurType, blurRadius, blurOutput);

        // Step Find_Lines0:
        Mat findLinesInput = blurOutput;
        findLines(findLinesInput, findLinesOutput);

        // Step Filter_Lines0:
        ArrayList<Line> filterLinesLines = findLinesOutput;
        double filterLinesMinLength = 20.0;
        double[] filterLinesAngle = {71.22302158273382, 109.40577249575551};
        filterLines(filterLinesLines, filterLinesMinLength, filterLinesAngle, filterLinesOutput);

    }

    /**
     * This method is a generated getter for the output of a Resize_Image.
     *
     * @return Mat output from Resize_Image.
     */
    public Mat resizeImageOutput() {
        return resizeImageOutput;
    }

    /**
     * This method is a generated getter for the output of a HSL_Threshold.
     *
     * @return Mat output from HSL_Threshold.
     */
    public Mat hslThresholdOutput() {
        return hslThresholdOutput;
    }

    /**
     * This method is a generated getter for the output of a Blur.
     *
     * @return Mat output from Blur.
     */
    public Mat blurOutput() {
        return blurOutput;
    }

    /**
     * This method is a generated getter for the output of a Find_Lines.
     *
     * @return ArrayList<Line> output from Find_Lines.
     */
    public ArrayList<Line> findLinesOutput() {
        return findLinesOutput;
    }

    /**
     * This method is a generated getter for the output of a Filter_Lines.
     *
     * @return ArrayList<Line> output from Filter_Lines.
     */
    public ArrayList<Line> filterLinesOutput() {
        return filterLinesOutput;
    }


    /**
     * Scales and image to an exact size.
     *
     * @param input The image on which to perform the Resize.
     * @param width The width of the output in pixels.
     * @param height The height of the output in pixels.
     * @param interpolation The type of interpolation.
     * @param output The image in which to store the output.
     */
    private void resizeImage(Mat input, double width, double height,
            int interpolation, Mat output) {
        Imgproc.resize(input, output, new Size(width, height), 0.0, 0.0, interpolation);
    }

    /**
     * Segment an image based on hue, saturation, and luminance ranges.
     *
     * @param input The image on which to perform the HSL threshold.
     * @param hue The min and max hue
     * @param sat The min and max saturation
     * @param lum The min and max luminance
     * //     * @param output The image in which to store the output.
     */
    private void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum,
            Mat out) {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);
        Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]),
                new Scalar(hue[1], lum[1], sat[1]), out);
    }

    /**
     * Softens an image using one of several filters.
     *
     * @param input The image on which to perform the blur.
     * @param type The blurType to perform.
     * @param doubleRadius The radius for the blur.
     * @param output The image in which to store the output.
     */
    private void blur(Mat input, BlurType type, double doubleRadius,
            Mat output) {
        int radius = (int) (doubleRadius + 0.5);
        int kernelSize;
        switch (type) {
            case BOX:
                kernelSize = 2 * radius + 1;
                Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
                break;
            case GAUSSIAN:
                kernelSize = 6 * radius + 1;
                Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
                break;
            case MEDIAN:
                kernelSize = 2 * radius + 1;
                Imgproc.medianBlur(input, output, kernelSize);
                break;
            case BILATERAL:
                Imgproc.bilateralFilter(input, output, -1, radius, radius);
                break;
        }
    }

    /**
     * Finds all line segments in an image.
     *
     * @param input The image on which to perform the find lines.
     * @param lineList The output where the lines are stored.
     */
    private void findLines(Mat input, ArrayList<Line> lineList) {
        final LineSegmentDetector lsd = Imgproc.createLineSegmentDetector();
        final Mat lines = new Mat();
        lineList.clear();
        if (input.channels() == 1) {
            lsd.detect(input, lines);
        } else {
            final Mat tmp = new Mat();
            Imgproc.cvtColor(input, tmp, Imgproc.COLOR_BGR2GRAY);
            lsd.detect(tmp, lines);
        }
        if (!lines.empty()) {
            for (int i = 0; i < lines.rows(); i++) {
                lineList.add(new Line(lines.get(i, 0)[0], lines.get(i, 0)[1],
                        lines.get(i, 0)[2], lines.get(i, 0)[3]));
            }
        }
    }

    /**
     * Filters out lines that do not meet certain criteria.
     *
     * @param inputs The lines that will be filtered.
     * @param minLength The minimum length of a line to be kept.
     * @param angle The minimum and maximum angle of a line to be kept.
     * @param outputs The output lines after the filter.
     */
    private void filterLines(List<Line> inputs, double minLength, double[] angle,
            List<Line> outputs) {
        outputs = inputs.stream()
                .filter(line -> line.lengthSquared() >= Math.pow(minLength, 2))
                .filter(line -> (line.angle() >= angle[0] && line.angle() <= angle[1])
                        || (line.angle() + 180.0 >= angle[0] && line.angle() + 180.0 <= angle[1]))
                .collect(Collectors.toList());
    }

    /**
     * An indication of which type of filter to use for a blur.
     * Choices are BOX, GAUSSIAN, MEDIAN, and BILATERAL
     */
    enum BlurType {
        BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
        BILATERAL("Bilateral Filter");

        private final String label;

        BlurType(String label) {
            this.label = label;
        }

        public static BlurType get(String type) {
            if (BILATERAL.label.equals(type)) {
                return BILATERAL;
            } else if (GAUSSIAN.label.equals(type)) {
                return GAUSSIAN;
            } else if (MEDIAN.label.equals(type)) {
                return MEDIAN;
            } else {
                return BOX;
            }
        }

        @Override
        public String toString() {
            return this.label;
        }
    }

    public static class Line {

        public final double x1, y1, x2, y2;

        public Line(double x1, double y1, double x2, double y2) {
            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
        }

        public double lengthSquared() {
            return Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2);
        }

        public double length() {
            return Math.sqrt(lengthSquared());
        }

        public double angle() {
            return Math.toDegrees(Math.atan2(y2 - y1, x2 - x1));
        }
    }


}

